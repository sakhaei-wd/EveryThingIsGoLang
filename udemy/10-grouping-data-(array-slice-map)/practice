package main

import (
	"fmt"
)

func main() {
	var x [5]int
	x[0] = 12
	fmt.Println(x)
	fmt.Print(x[0])

	//composite literal
	y := []int{4, 5, 160, 161}
	fmt.Println(y)

	//index-value for loop on array
	for i, v := range y {
		fmt.Printf("a[%v]= %v | ", i, v)
	}

	//slicing of slice
	t := y[:2]
	t = y[:]
	t = y[1:]
	fmt.Println(t)

	//append to slice
	var z = []int{3, 4, 5, 6}
	z = append(z, 7,8,9)
	fmt.Println(z)

	//append slice to slice
	z = append(z, t...)
	fmt.Println(z)

	//deleting from slice (such a cool method!)
	z = append(z[:2],z[7:]...)
	fmt.Println(z)

	//make slices

	//make increase length and capacity of array by adding external array to original one
	fmt.Println("len z : ",len(z))
	fmt.Println("cap z : ",cap(z))
	z = make([]int, 30) //so we increase the cap and length up to 30 item


	fmt.Println("len z : ",len(z))
	fmt.Println("cap z : ",cap(z))
	//when we append items to array, they put into end of array, so length of array grows 
	//and capacity increased base on "make growth number (here is 30)"
	//so the new cap and length will be : 34 (30 + 4 new item) and 60 (30 + 30)
	z = append(z, 20,21,22,23)
	fmt.Println("len z : ",len(z))
	fmt.Println("cap z : ",cap(z))

	//multi-dimensional slices
	man := [] string{"james","bond","36","UK"}
	woman := [] string{"wonder","girl","25","USA"}
	mix := [][]string{man,woman} //slices of slice
	fmt.Println(mix)

	//maps : are key-value store , which allows you to store some values based upon some keys	
	//and they are so fast,super efficient look up
	//so i needed to store phoneNumbers for all of my friends i could use key-value like : name - telephone
	m := map[string]int{
		"saeed" : 989127561232,
		"majid" : 989351251125,
	}

	fmt.Println(m)
	fmt.Println(m["saeed"]) //lookup for value
	
	//comma ok idiom
	v,ok := m["hosein"]
	fmt.Printf("%v with value %v \n", ok, v)
	

	//add element and range in maps
	//print all keys and their values inside our map
	for k,v := range m{
		fmt.Println(k,v)
	}



}

//1 - Arrays are fixed-length sequences of items of the same type.
//2 - Array is numbered sequence of elements of a single type. the number of elements
//	  is called length and is never negative

//Slices, on the other hand, are much more flexible, powerful, and convenient than arrays.
//Unlike arrays, slices can be resized using the built-in append function.

//slices allow you to group together values of the same type
