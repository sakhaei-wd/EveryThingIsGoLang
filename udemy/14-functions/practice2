package main

import (
	"fmt"
)

func main() {
	sa1 := secretAgent{
		person{firstName: "James", lastName: "Bond"},
		true,
	}

	p2 := person{firstName: "Lionel", lastName: "Messi"}
	
	sa1.speak()
	p2.speak()

	//bar can get sa1 and p2 (secretAgent and person)
	//because both of them has method speak attached to it
	//it's called polymorphism (poly : many , morph : change)
	//so this function can take in many different types
	bar(sa1)
	bar(p2)

	//anonymous funcion : a function which used after it's creation
	//as it called anonymous it shouldn't have any identifier
	func (name string){
		fmt.Println(name)
	}("Hello, I'm Anonymous Function")


	//func expression : 
	//function in go is a type, (first class citizen) and like other type 
	//it can be assign to a variable. like : 
	f1 := func (name string){
		fmt.Println("Hello",name)
	}	
	
	f1("MrMaker")

	//if we assign anonymous function to variable , it should have return value
	f2:= func(number int) int{
		return number + 2
	}(12)

	fmt.Println(f2)
	
	//func which returning a func
	ff := firstFunc(12)
	fmt.Printf("%T\n",ff)
	fmt.Println(ff())
	
	//now look at this : 
	fmt.Println(firstFunc(13))
	fmt.Println(firstFunc(13)())

}

//todd's joke about interfaces : 
//hey baby, if you have got this method , then you're my type
type human interface {	
	speak()
}

type secretAgent struct {
	person
	ltk bool
}

func bar(h human) {
	//switch on type , the name of this switch 
	switch h.(type){
	case person:
		fmt.Println("i'm person", h.(person).firstName)  //.(person) is assertion (opposite of conversion)
														 //that's kind of like a strong, active word
	case secretAgent:
		fmt.Println("i'm secretAgent", h.(secretAgent).firstName)
		
	}
}

func (s secretAgent) speak() {
	fmt.Println(s.firstName, s.lastName, " is a secretAgent")
}

type person struct {
	firstName string
	lastName  string
}

func (p person) speak() {
	fmt.Println(p.firstName, p.lastName, " is a person")
}

//func return func
func firstFunc(number int) func() int {
	return func() int {
		return 10 * number
	}
}