package main

import (
	"fmt"
)

func main() {

	//functional programming not something that is recommended in go, however it's good
	//to beaware of callbacks
	//idiomatic go : write clear, simple, readable code

	fmt.Println(sum(2, 4, 5, 6))
	//so that's callback, passing func as an argument to another func
	fmt.Println("sum is : ", evenSum(sum, 2, 4, 5, 6, 7, 8, 9, 10))

	//closure
	//we closing the variable, so we limited the scope
	a := incrementor()
	b := incrementor()
	fmt.Println(b())
	fmt.Println(a())
	fmt.Println(b())
	fmt.Println(b())
}

//here's package level scope
var x int

func sum(x ...int) int {
	sum := 0
	for _, v := range x {
		sum += v
	}
	return sum
}

func evenSum(sum func(x ...int) int, inputNums ...int) int {

	eveNum := []int{}
	for _, v := range inputNums {
		if v%2 == 0 {
			eveNum = append(eveNum, v)
		}
	}
	return sum(eveNum...)
}

//closure , using a code block to close the values of variables
//and keep their scope a little bit more narrow
func incrementor() func() int {
	var x int
	return func() int {
		x++
		return x
	}
}
