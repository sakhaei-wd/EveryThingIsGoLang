package main

import (
	"fmt"
	"runtime"
	"sync"
	//"time"
)

func main() {
	fmt.Println("CPUs : ", runtime.NumCPU())
	fmt.Println("GoRoutines : ", runtime.NumGoroutine())

	counter := 0
	const gs = 100
	var wg sync.WaitGroup
	wg.Add(gs)

	for i := 0; i < gs; i++ {
		go func() {
			v := counter
			//time.Sleep(time.Second)
			runtime.Gosched()
			v++
			counter = v
			wg.Done()
		}()

		// go func(index *int) {
		// 	counter++
		// }(&counter)

		fmt.Println("GoRoutines : ", runtime.NumGoroutine())
	}
	wg.Wait()
	fmt.Println("GoRoutines : ", runtime.NumGoroutine())
	fmt.Println("count:", counter)

}


//when we run this code , we get different values for count 
//also if we run it on playground we see different results there ,
//or also if you remove line 33 (fmt.Println which makes codes to run slower and GoRoutines decreseas)
//this incosistency occurs because of race condition and now we 
//should make a way to prevent it
//to fix that we can use mutex ! (next file)

//if you put `go run -race race-condition.go` into terminal you can see "Found 1 data race(s)" 
//in printline which shows we have a race condition

