package main

import (
	"errors"
	"fmt"
)

func BubbleSort(data []int) {
	var sorted bool
	for !sorted {
		sorted = true
		for i := 0; i < len(data)-1; i++ {
			if data[i] > data[i+1] {
				data[i], data[i+1] = data[i+1], data[i]
				sorted = false
			}
		}
	}
}

const (
	MinInt = 0
	MaxInt = 65535 // Will use 524288 Bytes
)

var LimitsError = errors.New("Incorrect limits")

// CountingSort sorts a slice of ints in increasing order.
func CountingSort(data []int, minValue int, maxValue int) (err error) {
	if len(data) == 0 {
		return
	}

	if minValue < MinInt || maxValue > MaxInt {
		err = LimitsError
		return
	}

	defer func() {
		if r := recover(); r != nil {
			err = fmt.Errorf("%v", r)
			return
		}
	}()

	counts := make([]int, maxValue-minValue+1)
	for _, value := range data {
		counts[value-minValue]++
	}

	i := 0
	for value, count := range counts {
		for ; count > 0; count-- {
			data[i] = value + minValue
			i++
		}
	}
	return
}

func main() {
	customArr := []int{23, 44, 2, 11, 31}

	//BubbleSort(customArr)
	//CountingSort(customArr,1,100)

	for i := 0; i < len(customArr); i++ {
		fmt.Printf("%v ", customArr[i])
	}
}
