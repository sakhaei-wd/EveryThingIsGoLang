package main

import (
	"fmt"
	"io/ioutil"
	"os"
)


func main() {

	files, err := ioutil.ReadDir(".")
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	for _, file := range files {
		fmt.Println(file.Name())
	}
}

//print dev
      //etc
      //tmp
      //usr

//====================================================================
//tips about error handling

* Errors are values.
* Don’t just check errors, handle them gracefully.
* Don’t panic.
* Make the zero value useful.
* The bigger the interface, the weaker the abstraction.
* interface{} says nothing.
* Gofmt’s style is no one’s favorite, yet gofmt is everyone’s favorite.
* Documentation is for users.
* A little copying is better than a little dependency.
* Clear is better than clever.
* Concurrency is not parallelism.
* Don’t communicate by sharing memory, share memory by communicating.
* Channels orchestrate; mutexes serialize.
	
			—Rob Pike, Go Proverbs
				(see go-proverbs.github.io)


//====================================================================
The defer keyword
To ensure that that the file is closed correctly, you can make use of the defer keyword


func proverbs(name string) error {
	f, err := os.Create(name)
	if err != nil {
		return err
	}
	defer f.Close()
	_, err = fmt.Fprintln(f, "Errors are values.")
	if err != nil {
		return err
	}
	_, err = fmt.Fprintln(f, "Don’t just check errors, handle them gracefully.")
	return err
}




